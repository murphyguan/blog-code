{"remainingRequest":"E:\\JAVA\\blog\\blog-code\\web\\blog\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\JAVA\\blog\\blog-code\\web\\blog\\node_modules\\vuetify-loader\\lib\\loader.js??ref--18-0!E:\\JAVA\\blog\\blog-code\\web\\blog\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\JAVA\\blog\\blog-code\\web\\blog\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\JAVA\\blog\\blog-code\\web\\blog\\src\\views\\article\\Article.vue?vue&type=template&id=13a80313&scoped=true&","dependencies":[{"path":"E:\\JAVA\\blog\\blog-code\\web\\blog\\src\\views\\article\\Article.vue","mtime":1713440622000},{"path":"E:\\JAVA\\blog\\blog-code\\web\\blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1728701076490},{"path":"E:\\JAVA\\blog\\blog-code\\web\\blog\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1728701077978},{"path":"E:\\JAVA\\blog\\blog-code\\web\\blog\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1728701077859},{"path":"E:\\JAVA\\blog\\blog-code\\web\\blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1728701076490},{"path":"E:\\JAVA\\blog\\blog-code\\web\\blog\\node_modules\\vue-loader\\lib\\index.js","mtime":1728701077734}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}